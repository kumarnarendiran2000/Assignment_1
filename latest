
/src/routes/apiRoute.ts
-----------------------
import { Hono } from "hono";
import { generateAuthURIHandler } from "../handlers/generateAuthURIHandler";
import { generateAccessTokenHandler } from "../handlers/generateAccessTokenHandler";

const app = new Hono();

// Route to generate Authorization URI
app.get("/auth-uri", async (ctx) => {
  const appUserId = ctx.req.query("appUserId");
  if (!appUserId) {
    return ctx.json({ error: "Missing appUserId" }, 400);
  }

  const result = await generateAuthURIHandler(appUserId);
  return ctx.json(result);
});

// Route to exchange auth code and retrieve scoped token
app.get("/access-token", async (ctx) => {
  const authCode = ctx.req.query("authCode");
  if (!authCode) {
    return ctx.json({ error: "Missing authCode" }, 400);
  }

  const result = await generateAccessTokenHandler(authCode);
  return ctx.json(result);
});

export default app;

-------------------------------------------------------------------------------------

/src/handlers/generateAuthURIHandler.ts
---------------------------------------
import { getUser, saveUser } from "../utils/localStorageUtil";
import { generateClientToken } from "../services/generateClientToken";
import createUser from "../services/createUser";
import generateAuthURI from "../services/generateAuthURI";

export async function generateAuthURIHandler(appUserId: string): Promise<object> {
  let moneyhubUserId = await getUser(appUserId);

  if (!moneyhubUserId) {
    // Step 1: Generate client credentials token with scope `user:create`
    const clientToken = await generateClientToken();

    // Step 2: Create Moneyhub user using the client token
    moneyhubUserId = await createUser(clientToken);

    // Step 3: Save the new user ID locally
    await saveUser(appUserId, moneyhubUserId);
  }

  // Step 4: Generate the Authorization URI
  const authURI = await generateAuthURI(moneyhubUserId);

  return { authURI };
}

-------------------------------------------------------------------------------------

/src/handlers/generateAccessTokenHandler.ts
-------------------------------------------
import exchangeAuthCode from "../services/exchangeAuthCode";
import retrieveScopedToken from "../services/retrieveScopedToken";

export async function generateAccessTokenHandler(authCode: string): Promise<object> {
  // Step 1: Exchange authorization code for access token and user ID
  const { accessToken, userId } = await exchangeAuthCode(authCode);

  // Step 2: Retrieve scoped token using the user ID
  const scopedToken = await retrieveScopedToken(userId);

  return { accessToken, scopedToken, userId };
}

-------------------------------------------------------------------------------------

/src/services/generateAuthURI.ts
--------------------------------
import axios from "axios";
import { generateJWT } from "./utils/jwtUtil";

export default async function generateAuthURI(userId: string): Promise<string> {
  const clientAssertion = await generateJWT();

  const body = new URLSearchParams({
    client_id: "<your_client_id>",
    response_type: "code",
    redirect_uri: "<your_redirect_uri>",
    state: Math.random().toString(36),
    nonce: Math.random().toString(36),
    scope: "openid id:test",
    claims: JSON.stringify({
      id_token: {
        sub: { essential: true, value: userId },
        "mh:con_id": { essential: true },
      },
    }),
    client_assertion_type: "urn:ietf:params:oauth:client-assertion-type:jwt-bearer",
    client_assertion: clientAssertion,
  });

  const response = await axios.post(
    "https://identity.moneyhub.co.uk/oidc/request",
    body,
    { headers: { "Content-Type": "application/x-www-form-urlencoded" } }
  );

  return response.data.url;
}

-------------------------------------------------------------------------------------

/src/services/exchangeAuthCode.ts
---------------------------------
import axios from "axios";
import { generateJWT } from "./utils/jwtUtil";

export default async function exchangeAuthCode(authCode: string): Promise<{ accessToken: string; userId: string }> {
  const clientAssertion = await generateJWT();

  const body = new URLSearchParams({
    grant_type: "authorization_code",
    code: authCode,
    redirect_uri: "<your_redirect_uri>",
    client_id: "<your_client_id>",
    client_assertion_type: "urn:ietf:params:oauth:client-assertion-type:jwt-bearer",
    client_assertion: clientAssertion,
  });

  const response = await axios.post(
    "https://identity.moneyhub.co.uk/oidc/token",
    body,
    { headers: { "Content-Type": "application/x-www-form-urlencoded" } }
  );

  const { access_token, id_token } = response.data;
  const payload = JSON.parse(Buffer.from(id_token.split(".")[1], "base64").toString("utf-8"));

  return { accessToken: access_token, userId: payload.sub };
}

-------------------------------------------------------------------------------------

/src/services/retrieveScopedToken.ts
-------------------------------------
import axios from "axios";
import { generateJWT } from "./utils/jwtUtil";

export default async function retrieveScopedToken(userId: string): Promise<string> {
  const clientAssertion = await generateJWT();

  const body = new URLSearchParams({
    grant_type: "client_credentials",
    scope: "accounts:read",
    sub: userId,
    client_assertion_type: "urn:ietf:params:oauth:client-assertion-type:jwt-bearer",
    client_assertion: clientAssertion,
  });

  const response = await axios.post(
    "https://identity.moneyhub.co.uk/oidc/token",
    body,
    { headers: { "Content-Type": "application/x-www-form-urlencoded" } }
  );

  return response.data.access_token;
}

-------------------------------------------------------------------------------------

/src/services/createUser.ts
---------------------------
import axios from "axios";

export default async function createUser(clientToken: string): Promise<string> {
  // Step 2: Call the create user API
  const response = await axios.post(
    "https://identity.moneyhub.co.uk/users",
    {}, // Empty body
    {
      headers: {
        "Content-Type": "application/json",
        Authorization: `Bearer ${clientToken}`, // Pass client token as Bearer token
      },
    }
  );

  return response.data.sub; // Return the user ID (sub)
}

----------

import axios from "axios";
import { generateJWT } from "./utils/jwtUtil";

export async function generateClientToken(): Promise<string> {
  const clientAssertion = await generateJWT();

  const body = new URLSearchParams({
    grant_type: "client_credentials",
    scope: "user:create",
    client_assertion_type: "urn:ietf:params:oauth:client-assertion-type:jwt-bearer",
    client_assertion: clientAssertion,
  });

  const response = await axios.post(
    "https://identity.moneyhub.co.uk/oidc/token",
    body,
    { headers: { "Content-Type": "application/x-www-form-urlencoded" } }
  );

  return response.data.access_token; // Return the client credentials token
}

-------------------------------------------------------------------------------------

/src/services/utils/jwtUtil.ts
------------------------------
import * as jose from "jose";

export async function generateJWT(): Promise<string> {
  const privateKey = "<your_private_key>";
  const clientId = "<your_client_id>";

  const payload = {
    iss: clientId,
    sub: clientId,
    aud: "https://identity.moneyhub.co.uk/oidc/token",
    jti: Math.random().toString(36),
    exp: Math.floor(Date.now() / 1000) + 300,
  };

  const key = await jose.importPKCS8(privateKey, "RS256");
  return new jose.SignJWT(payload).setProtectedHeader({ alg: "RS256" }).sign(key);
}

-------------------------------------------------------------------------------------

/src/utils/localStorageUtil.ts
------------------------------
import { promises as fs } from "fs";
import * as path from "path";

const FILE_PATH = path.resolve(__dirname, "../data/users.json");

export async function getUser(appUserId: string): Promise<string | null> {
  try {
    const data = JSON.parse(await fs.readFile(FILE_PATH, "utf-8"));
    return data[appUserId] || null;
  } catch (err) {
    if (err.code === "ENOENT") return null; // Return null if file doesn't exist
    throw err;
  }
}

export async function saveUser(appUserId: string, moneyhubUserId: string): Promise<void> {
  const data = await getUsersFile();
  data[appUserId] = moneyhubUserId;
  await fs.writeFile(FILE_PATH, JSON.stringify(data, null, 2));
}

async function getUsersFile(): Promise<Record<string, string>> {
  try {
    return JSON.parse(await fs.readFile(FILE_PATH, "utf-8"));
  } catch (err) {
    if (err.code === "ENOENT") return {}; // Return an empty object if file doesn't exist
    throw err;
  }
}