import { describe, test, expect, vi } from "vitest";
import { generateBearerTokenForUserCreation } from "./bearerTokenGeneration";
import { getMHFormParams } from "./getMHFormParams";
import { mockMoneyHubAxiosInstance } from "./testUtils/mocks";

vi.mock("./getMHFormParams"); // Mock the common body generation
const mockMoneyHubAxios = mockMoneyHubAxiosInstance();

describe("Bearer Token Generation", () => {
  test("should generate a bearer token successfully", async () => {
    const mockResponse = { data: { access_token: "mocked-access-token" } };

    // Mocking getMHFormParams to return expected form params
    vi.mocked(getMHFormParams).mockResolvedValueOnce(
      new URLSearchParams({
        scope: "user:create",
        grant_type: "client_credentials",
        client_assertion_type: "urn:ietf:params:oauth:client-assertion-type:jwt-bearer",
        client_assertion: "mocked-client-assertion",
      })
    );

    // Mocking Axios POST response
    mockMoneyHubAxios.post.mockResolvedValueOnce(mockResponse);

    // Call the function
    const token = await generateBearerTokenForUserCreation(mockMoneyHubAxios, "user:create");

    // Expectations
    expect(getMHFormParams).toHaveBeenCalledWith({
      scope: "user:create",
      grant_type: "client_credentials",
    }); // Ensure correct params passed
    expect(mockMoneyHubAxios.post).toHaveBeenCalledWith(
      "/oidc/token",
      expect.any(URLSearchParams),
      { headers: { "Content-Type": "application/x-www-form-urlencoded" } }
    );
    expect(token).toBe("mocked-access-token"); // Verify returned token
  });

  test("should throw an error if token generation fails", async () => {
    // Mocking Axios POST response with an error
    mockMoneyHubAxios.post.mockRejectedValueOnce(new Error("Request failed"));

    await expect(generateBearerTokenForUserCreation(mockMoneyHubAxios, "user:create")).rejects.toThrow(
      "Failed to generate client token"
    );
  });
});


------


import axios from "axios";
import MockAdapter from "axios-mock-adapter";
import { describe, test, expect, vi } from "vitest";
import { generateBearerTokenForUserCreation } from "./bearerTokenGeneration";
import { getMHFormParams } from "./getMHFormParams";

vi.mock("./getMHFormParams"); // Mock the common body generation function

describe("Bearer Token Generation", () => {
  let mockMoneyHubAxios: ReturnType<typeof axios.create>;
  let mockAdapter: MockAdapter;

  beforeEach(() => {
    // Create Axios instance and attach MockAdapter
    mockMoneyHubAxios = axios.create({
      baseURL: "https://mock-moneyhub-api.com", // Mock base URL
      headers: {
        "Content-Type": "application/x-www-form-urlencoded",
      },
    });
    mockAdapter = new MockAdapter(mockMoneyHubAxios);
  });

  afterEach(() => {
    mockAdapter.reset(); // Reset mock adapter after each test
  });

  test("should generate a bearer token successfully", async () => {
    const mockResponse = { access_token: "mocked-access-token" };

    // Mocking getMHFormParams to return expected form params
    vi.mocked(getMHFormParams).mockResolvedValueOnce(
      new URLSearchParams({
        scope: "user:create",
        grant_type: "client_credentials",
        client_assertion_type: "urn:ietf:params:oauth:client-assertion-type:jwt-bearer",
        client_assertion: "mocked-client-assertion",
      })
    );

    // Mocking Axios POST response
    mockAdapter.onPost("/oidc/token").reply(200, mockResponse);

    // Call the function
    const token = await generateBearerTokenForUserCreation(mockMoneyHubAxios, "user:create");

    // Expectations
    expect(getMHFormParams).toHaveBeenCalledWith({
      scope: "user:create",
      grant_type: "client_credentials",
    }); // Ensure correct params passed
    expect(mockAdapter.history.post.length).toBe(1); // Ensure one POST request was made
    expect(mockAdapter.history.post[0].url).toBe("/oidc/token"); // Correct endpoint
    expect(token).toBe("mocked-access-token"); // Verify returned token
  });

  test("should throw an error if token generation fails", async () => {
    // Mocking Axios POST response with an error
    mockAdapter.onPost("/oidc/token").reply(500);

    await expect(generateBearerTokenForUserCreation(mockMoneyHubAxios, "user:create")).rejects.toThrow(
      "Failed to generate client token"
    );
  });
});

----

import axios from "axios";
import MockAdapter from "axios-mock-adapter";
import { describe, test, expect, vi } from "vitest";
import { createUser } from "./createUser";
import { generateBearerTokenForUserCreation } from "./bearerTokenGeneration";

vi.mock("./bearerTokenGeneration"); // Mock the bearer token generation service

describe("Create User Service", () => {
  let mockMoneyHubAxios: ReturnType<typeof axios.create>;
  let mockAdapter: MockAdapter;

  beforeEach(() => {
    // Create a mock Axios instance
    mockMoneyHubAxios = axios.create({
      baseURL: "https://mock-moneyhub-api.com",
      headers: {
        "Content-Type": "application/json",
      },
    });
    mockAdapter = new MockAdapter(mockMoneyHubAxios);
  });

  afterEach(() => {
    // Reset the mock adapter after each test
    mockAdapter.reset();
  });

  test("should create a user successfully", async () => {
    const mockBearerToken = "mocked-access-token";
    const mockResponse = { data: { userId: "mocked-user-id" } };

    // Mock the generateBearerTokenForUserCreation function
    vi.mocked(generateBearerTokenForUserCreation).mockResolvedValueOnce(mockBearerToken);

    // Mock the Axios POST response
    mockAdapter.onPost("/users").reply(200, mockResponse);

    // Call the function
    const userId = await createUser(mockMoneyHubAxios);

    // Expectations
    expect(generateBearerTokenForUserCreation).toHaveBeenCalledWith(mockMoneyHubAxios, "user:create"); // Verify the token generation call
    expect(mockAdapter.history.post.length).toBe(1); // Ensure one POST request was made
    expect(mockAdapter.history.post[0].url).toBe("/users"); // Correct endpoint
    expect(mockAdapter.history.post[0].headers.Authorization).toBe(`Bearer ${mockBearerToken}`); // Correct Authorization header
    expect(userId).toBe("mocked-user-id"); // Verify returned userId
  });

  test("should throw an error if user creation fails", async () => {
    const mockBearerToken = "mocked-access-token";

    // Mock the generateBearerTokenForUserCreation function
    vi.mocked(generateBearerTokenForUserCreation).mockResolvedValueOnce(mockBearerToken);

    // Mock the Axios POST response with an error
    mockAdapter.onPost("/users").reply(500);

    await expect(createUser(mockMoneyHubAxios)).rejects.toThrow(
      "Failed to create Moneyhub user"
    );
  });
});

--- 
update to bearer token - fail case

test("should throw an error when invalid body parameters are passed", async () => {
    // Mock getMHFormParams to return incomplete or invalid parameters
    vi.mocked(getMHFormParams).mockResolvedValueOnce(
      new URLSearchParams({
        // Missing 'grant_type' intentionally to simulate a bad request
        scope: "user:create",
        client_assertion_type: "urn:ietf:params:oauth:client-assertion-type:jwt-bearer",
        client_assertion: "mocked-client-assertion",
      })
    );

    mockAdapter.onPost("/oidc/token").reply(400, { error: "invalid_request" });

    await expect(generateBearerTokenForUserCreation(mockMoneyHubAxios, "user:create")).rejects.toThrow(
      "Failed to generate client token"
    );

    // Ensure the POST request was made despite the invalid params
    expect(mockAdapter.history.post.length).toBe(1);
    expect(mockAdapter.history.post[0].data).not.toContain("grant_type");
  });
});